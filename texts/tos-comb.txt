### 問題の情報量

1
* (6m-1)!!  % ~= (6m / e)^(3m)
* 4^(m-1)   % starting room の色は自明なので除いた
/ (m-1)!    % ~= (m / e)^(m-1)
* (k!)^(2m-1)

k = 2 or 3
k! = 2 or 6

m^(2m-1) * (6^3 * 4 * (k!)^2 / e^2)^m

定数部分
k = 1:  116.9  4.76 nat
k = 2:  467.7  6.15 nat
k = 3: 4209.   8.35 nat

m^2
m =  6: 3.58 nat
m = 12: 4.97 nat
m = 18: 5.78 nat
m = 24: 6.36 nat
m = 30: 6.80 nat


### 1回探索して得られる情報量


4^(6km)     % こっちも starting room の色は除いた

2手で戻りやすいことを考慮すると、
9,5,5,5 / 24
これの entropy は log(3.85) くらい。大差ない。

>>> p = np.array([9,5,5,5])/24
>>> np.exp(-np.sum(p * np.log(p)))
np.float64(3.8504726945778804)

>>> -np.sum(p * np.log(p)).item() * 12
16.178351022906607


k = 2: 16.18 nat
k = 3: 24.27 nat


###

この近似だとどちらも 30 まで 1 手で解けてもおかしくない……。
k = 3 のほうが情報量的に余裕ある説はある。

でも実際には k = 3 のほうが難しいっぽい。
「書いてもう一度踏まないと情報が得られない」要素が k = 3 のほうが強い。

つぶしたほうのグラフが既知とすると、
「すべての cycle を通る」は「すべての node を通る」を含んでいるので、情報がちょっと無駄。
k = 3 だと cycle 2回ずつみたいな感じになってさらにたいへん。
